//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.07.18 at 10:35:14 AM MDT 
//


package com.cognos.developer.schemas.bmt._60._7;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for regularAggregateType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="regularAggregateType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN">
 *     &lt;enumeration value="unsupported"/>
 *     &lt;enumeration value="unknown"/>
 *     &lt;enumeration value="average"/>
 *     &lt;enumeration value="automatic"/>
 *     &lt;enumeration value="calculated"/>
 *     &lt;enumeration value="count"/>
 *     &lt;enumeration value="countDistinct"/>
 *     &lt;enumeration value="countNonZero"/>
 *     &lt;enumeration value="maximum"/>
 *     &lt;enumeration value="median"/>
 *     &lt;enumeration value="minimum"/>
 *     &lt;enumeration value="standardDeviation"/>
 *     &lt;enumeration value="sum"/>
 *     &lt;enumeration value="variance"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "regularAggregateType")
@XmlEnum
public enum RegularAggregateType {


    /**
     * Aggregation is not supported for this object.
     * 
     */
    @XmlEnumValue("unsupported")
    UNSUPPORTED("unsupported"),

    /**
     * Aggregation is unknown for this object.
     * 
     */
    @XmlEnumValue("unknown")
    UNKNOWN("unknown"),

    /**
     * Aggregation is computed as an average of the values in the result set for this object.
     * 
     */
    @XmlEnumValue("average")
    AVERAGE("average"),

    /**
     * The aggregation rule is determined automatically at run time. Wherever possible, calculated is used, then sum where necessary, followed by unsupported.
     * 
     */
    @XmlEnumValue("automatic")
    AUTOMATIC("automatic"),

    /**
     * Aggregated values are computed by aggregating the elements of the expression rather than the result. For example, if the aggregate rule for Q1_a is set to sum, and the rule for q1_b is set to average, then if this query item is based on the expression (QI_a / QI_b) * 100, the aggregate is computed as: ( sum(QI_a)  / average( QI_b ) ) * 100.
     * 
     * 
     */
    @XmlEnumValue("calculated")
    CALCULATED("calculated"),

    /**
     * Aggregation is computed as a count of the items in the result set for this object.
     * 
     */
    @XmlEnumValue("count")
    COUNT("count"),

    /**
     * Aggregation is computed as a count of unique items in the result set for this object.
     * 
     */
    @XmlEnumValue("countDistinct")
    COUNT_DISTINCT("countDistinct"),

    /**
     * Excludes zero and NULL values.
     * 
     */
    @XmlEnumValue("countNonZero")
    COUNT_NON_ZERO("countNonZero"),

    /**
     * Aggregation determines the maximum value in the result set for this object.
     * 
     */
    @XmlEnumValue("maximum")
    MAXIMUM("maximum"),

    /**
     * Aggregation determines the median value in the result set for this object.
     * 
     */
    @XmlEnumValue("median")
    MEDIAN("median"),

    /**
     * Aggregation determines the minimum value in the result set for this object.
     * 
     */
    @XmlEnumValue("minimum")
    MINIMUM("minimum"),

    /**
     * Aggregation determines the standard deviation in the result set for this object.
     * 
     */
    @XmlEnumValue("standardDeviation")
    STANDARD_DEVIATION("standardDeviation"),

    /**
     * Aggregation determines the sum of the values in the result set for this object.
     * 
     */
    @XmlEnumValue("sum")
    SUM("sum"),

    /**
     * Aggregation determines the variance in the result set for this object.
     * 
     */
    @XmlEnumValue("variance")
    VARIANCE("variance");
    private final String value;

    RegularAggregateType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static com.cognos.developer.schemas.bmt._60._7.RegularAggregateType fromValue(String v) {
        for (com.cognos.developer.schemas.bmt._60._7.RegularAggregateType c: com.cognos.developer.schemas.bmt._60._7.RegularAggregateType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
